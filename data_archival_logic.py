# -*- coding: utf-8 -*-
"""Data Archival Logic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rKLoBM4qavp7Evpwp_sNAoQ2DHaag-id

##Archive Old Records to Blob Storage

# Pseudocode in Python (Azure Function)
"""

import datetime
from azure.cosmos import CosmosClient
from azure.storage.blob import BlobServiceClient
from azure.data.tables import TableServiceClient

COSMOS_CONN_STR = "..."
BLOB_CONN_STR = "..."
TABLE_CONN_STR = "..."

def archive_old_records():
    cosmos_client = CosmosClient.from_connection_string(COSMOS_CONN_STR)
    container = cosmos_client.get_database_client("billing").get_container_client("records")

    blob_service = BlobServiceClient.from_connection_string(BLOB_CONN_STR)
    blob_container = blob_service.get_container_client("cold-billing-data")

    table_service = TableServiceClient.from_connection_string(TABLE_CONN_STR)
    table_client = table_service.get_table_client("BillingArchiveIndex")

    threshold_date = datetime.datetime.utcnow() - datetime.timedelta(days=90)
    old_records = container.query_items(
        query="SELECT * FROM c WHERE c.timestamp < @date",
        parameters=[{"name": "@date", "value": threshold_date.isoformat()}],
        enable_cross_partition_query=True
    )

    for record in old_records:
        record_id = record["id"]
        blob_name = f"{record_id}.json"
        blob_container.upload_blob(blob_name, data=json.dumps(record), overwrite=True)

        table_client.upsert_entity({
            "PartitionKey": "BillingRecord",
            "RowKey": record_id,
            "blob_uri": f"https://<account>.blob.core.windows.net/cold-billing-data/{blob_name}"
        })

        container.delete_item(record, partition_key=record["partitionKey"])

"""# Read Logic Update (in API)"""

def get_billing_record(record_id):
    try:
        # 1. Try Cosmos DB
        return cosmos_container.read_item(item=record_id, partition_key=record_id[:5])
    except cosmos_exceptions.CosmosResourceNotFoundError:
        # 2. Try Blob via index lookup
        entity = archive_table.get_entity(partition_key="BillingRecord", row_key=record_id)
        blob_uri = entity["blob_uri"]
        blob_data = requests.get(blob_uri)
        return json.loads(blob_data.content)