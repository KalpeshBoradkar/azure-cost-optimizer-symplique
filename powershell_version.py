# -*- coding: utf-8 -*-
"""PowerShell Version.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hYBolIXKow31uKaAaFCyShbO0pgNfrIy

##Cost optimization architecture in Azure (PowerShell Version)

###**1**. Archiving Old Records to Blob Storage
-----------------------------------------------------------

This script queries Cosmos DB for records older than 90 days, stores them in Blob Storage, updates an index in Table Storage, and deletes them from Cosmos DB.

Requirements:
-------------

Azure Az module (Install-Module Az)

Az.CosmosDB, Az.Storage, and AzTable modules
"""

# Configuration
$cosmosDbName = "billing"
$containerName = "records"
$resourceGroup = "your-rg"
$accountName = "your-cosmos-account"
$storageAccountName = "yourstorageacct"
$blobContainerName = "cold-billing-data"
$tableName = "BillingArchiveIndex"

# Authenticate
Connect-AzAccount

# Get Cosmos DB Keys
$cosmosKey = (Get-AzCosmosDBAccountKey -Name $accountName -ResourceGroupName $resourceGroup).PrimaryMasterKey

# Get Cosmos DB endpoint
$endpoint = (Get-AzCosmosDBAccount -ResourceGroupName $resourceGroup -Name $accountName).DocumentEndpoint

# Setup date threshold
$thresholdDate = (Get-Date).AddDays(-90).ToString("yyyy-MM-ddTHH:mm:ssZ")

# Query Cosmos DB using REST API (simplified version)
$headers = @{
  "Authorization" = "<generate-auth-token-here>"  # Typically generated using a function; needs implementation
  "x-ms-version" = "2017-02-22"
  "x-ms-date" = (Get-Date).ToUniversalTime().ToString("R")
}

# This is pseudo-code: You would loop through paginated responses
$response = Invoke-RestMethod -Uri "$endpoint/dbs/$cosmosDbName/colls/$containerName/docs" `
  -Method POST -Headers $headers `
  -Body '{"query":"SELECT * FROM c WHERE c.timestamp < @date","parameters":[{"name":"@date","value":"'"$thresholdDate"'"}]}' `
  -ContentType "application/query+json"

# Loop and archive
foreach ($record in $response.Documents) {
    $recordId = $record.id
    $partitionKey = $record.partitionKey
    $json = $record | ConvertTo-Json -Depth 10

    # Upload to Blob
    Set-AzStorageBlobContent -FilePath "$($recordId).json" `
      -Container $blobContainerName -Blob "$recordId.json" `
      -Context (Get-AzStorageAccount -Name $storageAccountName -ResourceGroupName $resourceGroup | Get-AzStorageContext)

    # Add entry to Table Storage
    $tableStorageContext = (Get-AzStorageAccount -ResourceGroupName $resourceGroup -Name $storageAccountName | Get-AzStorageContext)
    $entity = @{
        PartitionKey = "BillingRecord"
        RowKey       = $recordId
        blobUri      = "https://$storageAccountName.blob.core.windows.net/$blobContainerName/$recordId.json"
    }
    Add-AzTableRow -Table $tableName -Entity $entity -Context $tableStorageContext

    # Delete from Cosmos DB (requires REST or SDK call)
    # Example placeholder:
    # Remove-CosmosDBDocument -Id $recordId -PartitionKey $partitionKey -...
}

"""###**2**. Retrieval Logic in API (PowerShell)

This example shows retrieval flow logic, assuming you're using PowerShell in a Function App or API backend:
"""

param([string]$recordId)

try {
    # Try Cosmos DB first
    $record = Get-CosmosDbDocument -Id $recordId -PartitionKey $recordId.Substring(0,5)
    return $record
} catch {
    # If not found, fallback to Blob Storage via Table index
    $tableContext = Get-AzStorageContext -StorageAccountName $storageAccountName -ResourceGroupName $resourceGroup
    $index = Get-AzTableRow -Table $tableName -PartitionKey "BillingRecord" -RowKey $recordId -Context $tableContext

    if ($index) {
        $blobUri = $index.blobUri
        $data = Invoke-RestMethod -Uri $blobUri
        return $data
    } else {
        throw "Record not found in both hot and cold storage"
    }
}